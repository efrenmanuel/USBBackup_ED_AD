/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Model.CustomExceptions;
import Model.FileOperations;
import Model.Filters;
import Model.ManageTable;
import Model.MultiplePathsynchronizer;
import Model.SettingsFile;
import Model.Table_Map_Synchronizer;
import java.io.File;
import java.io.FileFilter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

import mdlaf.*;
import mdlaf.animation.*;
import mdlaf.utils.MaterialColors;
import mdlaf.animation.MaterialUIMovement;

/**
 *
 * @author alumno
 */
public class MainScreen extends javax.swing.JFrame {

    private HashMap<File, ArrayList<Object>> synchronizedPaths = new HashMap<>();
    private MultiplePathsynchronizer fileSynchronizer;
    private Table_Map_Synchronizer tbmSynchro;
    private HashMap<String, FilenameFilter> filters;

    /**
     * Creates new form MainScreen
     */
    public MainScreen() throws IOException, CustomExceptions {
        initComponents();
        this.setTitle("YourBackup!");
        synchronizedPaths = SettingsFile.getSyncedPaths();

        ManageTable.initialize(jTable1, synchronizedPaths);

        filters = new HashMap<>();
        filters.put("Images", new Filters.FilterImage());
        cbImages.setSelected(true);
        filters.put("Videos", new Filters.FilterVideo());
        cbVideos.setSelected(true);
        filters.put("Documents", new Filters.FilterDocument());
        cbDocuments.setSelected(true);
        filters.put("Others", new Filters.FilterOthers());
        cbOthers.setSelected(true);
        fileSynchronizer = new MultiplePathsynchronizer(synchronizedPaths, progressBarMainScreen, filters, messageLabel, stopper);
        tbmSynchro = new Table_Map_Synchronizer(jTable1, synchronizedPaths);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        progressBarMainScreen = new javax.swing.JProgressBar();
        messageLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        newBackupButton = new javax.swing.JButton();
        startBackup = new javax.swing.JButton();
        stopper = new javax.swing.JButton();
        removeDir = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        cbEverything = new javax.swing.JCheckBox();
        cbImages = new javax.swing.JCheckBox();
        cbVideos = new javax.swing.JCheckBox();
        cbDocuments = new javax.swing.JCheckBox();
        cbOthers = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 475));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        messageLabel.setText("Welcome to YourBackup!");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Source", "Last modified", "Backup", "Last modified", "Backup", "Clasify", "Delete Origin"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
        }

        newBackupButton.setText("Add backup directory");
        newBackupButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                newBackupButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                newBackupButtonMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newBackupButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                newBackupButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                newBackupButtonMouseEntered(evt);
            }
        });
        newBackupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBackupButtonActionPerformed(evt);
            }
        });

        startBackup.setText("Start Backup");
        startBackup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                startBackupMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                startBackupMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startBackupMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                startBackupMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                startBackupMouseEntered(evt);
            }
        });
        startBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBackupActionPerformed(evt);
            }
        });

        stopper.setText("Stop backup");
        stopper.setEnabled(false);
        stopper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopperActionPerformed(evt);
            }
        });

        removeDir.setText("Remove backup directory");
        removeDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDirActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Clasify");

        cbEverything.setSelected(true);
        cbEverything.setText("Everything");
        cbEverything.setAlignmentX(0.5F);
        cbEverything.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cbEverything.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEverythingActionPerformed(evt);
            }
        });

        cbImages.setSelected(true);
        cbImages.setText("Images");
        cbImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbImagesActionPerformed(evt);
            }
        });

        cbVideos.setSelected(true);
        cbVideos.setText("Videos");
        cbVideos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbVideosActionPerformed(evt);
            }
        });

        cbDocuments.setSelected(true);
        cbDocuments.setText("Documents");
        cbDocuments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDocumentsActionPerformed(evt);
            }
        });

        cbOthers.setSelected(true);
        cbOthers.setText("Others");
        cbOthers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOthersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbEverything, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(cbImages)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbVideos))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(cbDocuments)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbOthers)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbEverything)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbImages)
                    .addComponent(cbVideos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbDocuments)
                    .addComponent(cbOthers))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Search Duplicates");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(progressBarMainScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1029, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newBackupButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startBackup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeDir, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(stopper))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jSeparator1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newBackupButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeDir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startBackup)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopper)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(messageLabel)
                    .addComponent(progressBarMainScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        newBackupButton.setBackground(MaterialColors.GREEN_200);
        newBackupButton.setBackground(MaterialColors.GREEN_200);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (fileSynchronizer != null && fileSynchronizer.isAlive()) {
            fileSynchronizer.setStop(true);
        }
        try {
            SettingsFile.overwriteSettings(synchronizedPaths);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error when saving your settings", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_formWindowClosing

    private void newBackupButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newBackupButtonMouseEntered
        newBackupButton.setBackground(MaterialColors.GREEN_100);
    }//GEN-LAST:event_newBackupButtonMouseEntered

    private void newBackupButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newBackupButtonMouseExited
        newBackupButton.setBackground(MaterialColors.GREEN_200);
    }//GEN-LAST:event_newBackupButtonMouseExited

    private void newBackupButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newBackupButtonMousePressed
        newBackupButton.setBackground(MaterialColors.GREEN_300);
    }//GEN-LAST:event_newBackupButtonMousePressed

    private void newBackupButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newBackupButtonMouseReleased
        newBackupButton.setBackground(MaterialColors.GREEN_100);
    }//GEN-LAST:event_newBackupButtonMouseReleased

    private void newBackupButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newBackupButtonMouseClicked
        newBackupButton.setBackground(MaterialColors.GREEN_100);
    }//GEN-LAST:event_newBackupButtonMouseClicked

    private void newBackupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBackupButtonActionPerformed
        NewDirectoryBUForm directoryForm;

        try {
            directoryForm = new NewDirectoryBUForm(this, true);
            Map<File, ArrayList<Object>> toAdd = directoryForm.showDialog();
            if (toAdd != null && toAdd.size() > 0) {
                if (!synchronizedPaths.containsKey((File) toAdd.keySet().toArray()[0])) {
                    synchronizedPaths.putAll(toAdd);
                    ManageTable.update(jTable1, synchronizedPaths);
                    SettingsFile.addNewPaths((HashMap<File, ArrayList<Object>>) toAdd);
                } else {
                    synchronizedPaths.get((File) toAdd.keySet().toArray()[0]).addAll(toAdd.get(toAdd.keySet().toArray()[0]));
                    ManageTable.update(jTable1, synchronizedPaths);
                    SettingsFile.overwriteSettings(synchronizedPaths);
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_newBackupButtonActionPerformed

    private void startBackupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBackupMouseClicked
        startBackup.setBackground(MaterialColors.GRAY_100);
    }//GEN-LAST:event_startBackupMouseClicked

    private void startBackupMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBackupMouseEntered
        startBackup.setBackground(MaterialColors.GRAY_100);
    }//GEN-LAST:event_startBackupMouseEntered

    private void startBackupMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBackupMouseExited
        startBackup.setBackground(MaterialColors.GRAY_200);
    }//GEN-LAST:event_startBackupMouseExited

    private void startBackupMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBackupMousePressed
        startBackup.setBackground(MaterialColors.GRAY_300);
    }//GEN-LAST:event_startBackupMousePressed

    private void startBackupMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBackupMouseReleased
        startBackup.setBackground(MaterialColors.GRAY_100);
    }//GEN-LAST:event_startBackupMouseReleased

    private void startBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBackupActionPerformed
        tbmSynchro.updateMap();
        stopper.setEnabled(true);
        fileSynchronizer = new MultiplePathsynchronizer(synchronizedPaths, progressBarMainScreen, filters, messageLabel, stopper);
        fileSynchronizer.start();
        try {
            SettingsFile.overwriteSettings(synchronizedPaths);
            ManageTable.update(jTable1, synchronizedPaths);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error when saving your settings", "ERROR", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_startBackupActionPerformed

    private void stopperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopperActionPerformed
        fileSynchronizer.setStop(true);
    }//GEN-LAST:event_stopperActionPerformed

    private void removeDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDirActionPerformed
        File originPath = new File((String) jTable1.getValueAt(jTable1.getSelectedRow(), 0));
        if (jTable1.getSelectedRow() != -1) {
            if (synchronizedPaths.get(originPath).size() == 1) {
                synchronizedPaths.remove(originPath);
            } else {
                for (int path = 0; path < synchronizedPaths.get(originPath).size(); path += 4) {
                    if (((File) synchronizedPaths.get(originPath).get(path)).equals(new File((String) jTable1.getValueAt(jTable1.getSelectedRow(), 2)))) {
                        synchronizedPaths.get(originPath).remove(path + 3);
                        synchronizedPaths.get(originPath).remove(path + 2);
                        synchronizedPaths.get(originPath).remove(path + 1);
                        synchronizedPaths.get(originPath).remove(path);
                        break;
                    }
                }

            }
            ((DefaultTableModel) jTable1.getModel()).removeRow(jTable1.getSelectedRow());
            try {
                SettingsFile.overwriteSettings(synchronizedPaths);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error when saving your settings", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
        }

    }//GEN-LAST:event_removeDirActionPerformed

    private void cbEverythingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEverythingActionPerformed
        if (cbEverything.isSelected()) {
            filters = new HashMap<>();
            filters.put("Images", new Filters.FilterImage());
            cbImages.setSelected(true);
            filters.put("Videos", new Filters.FilterVideo());
            cbVideos.setSelected(true);
            filters.put("Documents", new Filters.FilterDocument());
            cbDocuments.setSelected(true);
            filters.put("Others", new Filters.FilterOthers());
            cbOthers.setSelected(true);
        } else {
            cbDocuments.setSelected(false);
            cbVideos.setSelected(false);
            cbImages.setSelected(false);
            cbOthers.setSelected(false);
            filters = null;
        }
    }//GEN-LAST:event_cbEverythingActionPerformed

    private void cbImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbImagesActionPerformed
        if (cbImages.isSelected()) {
            if (filters == null) {
                filters = new HashMap<>();
            }
            filters.put("Images", new Filters.FilterImage());
            if (cbVideos.isSelected() && cbDocuments.isSelected() && cbOthers.isSelected()) {
                cbEverything.setSelected(rootPaneCheckingEnabled);
            }
        } else {
            cbEverything.setSelected(false);
            filters.remove("Images");

            if (filters.size() == 0) {
                filters = null;
            }
        }
    }//GEN-LAST:event_cbImagesActionPerformed

    private void cbVideosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbVideosActionPerformed
        if (cbVideos.isSelected()) {
            if (filters == null) {
                filters = new HashMap<>();
            }
            filters.put("Videos", new Filters.FilterVideo());
            if (cbImages.isSelected() && cbDocuments.isSelected() && cbOthers.isSelected()) {
                cbEverything.setSelected(rootPaneCheckingEnabled);
            }
        } else {
            cbEverything.setSelected(false);
            filters.remove("Videos");
            if (filters.size() == 0) {
                filters = null;
            }
        }
    }//GEN-LAST:event_cbVideosActionPerformed

    private void cbDocumentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDocumentsActionPerformed
        if (cbDocuments.isSelected()) {
            if (filters == null) {
                filters = new HashMap<>();
            }
            filters.put("Videos", new Filters.FilterVideo());
            if (cbImages.isSelected() && cbVideos.isSelected() && cbOthers.isSelected()) {
                cbEverything.setSelected(rootPaneCheckingEnabled);
            }
        } else {
            cbEverything.setSelected(false);
            filters.remove("Documents");
            if (filters.size() == 0) {
                filters = null;
            }
        }
    }//GEN-LAST:event_cbDocumentsActionPerformed

    private void cbOthersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOthersActionPerformed
        if (cbOthers.isSelected()) {
            if (filters == null) {
                filters = new HashMap<>();
            }
            filters.put("Videos", new Filters.FilterVideo());
            if (cbImages.isSelected() && cbDocuments.isSelected() && cbVideos.isSelected()) {
                cbEverything.setSelected(rootPaneCheckingEnabled);
            }
        } else {
            cbEverything.setSelected(false);
            filters.remove("Others");
            if (filters.size() == 0) {
                filters = null;
            }
        }
    }//GEN-LAST:event_cbOthersActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JDialog duplicatesScreen= new DuplicatesScreen(this,true);
        duplicatesScreen.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void updateBottomBar(String text, int min, int max, int val) {
        progressBarMainScreen.setMinimum(min);
        progressBarMainScreen.setMaximum(max);
        progressBarMainScreen.setValue(val);
        messageLabel.setText(text);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            javax.swing.UIManager.setLookAndFeel(new MaterialLookAndFeel());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new MainScreen().setVisible(true);
                } catch (IOException | CustomExceptions ex) {
                    Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);

                }
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbDocuments;
    private javax.swing.JCheckBox cbEverything;
    private javax.swing.JCheckBox cbImages;
    private javax.swing.JCheckBox cbOthers;
    private javax.swing.JCheckBox cbVideos;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton newBackupButton;
    private javax.swing.JProgressBar progressBarMainScreen;
    private javax.swing.JButton removeDir;
    private javax.swing.JButton startBackup;
    private javax.swing.JButton stopper;
    // End of variables declaration//GEN-END:variables
}
