/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Model.InitializeTable;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.LookAndFeel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author efren
 */
public class NewDirectoryBUForm extends javax.swing.JDialog {

    Map<File, ArrayList<Object>> result = null;

    /**
     * Creates new form NewDirectoryBUForm
     */
    public NewDirectoryBUForm(java.awt.Frame parent, boolean modal) throws IOException {
        super(parent, modal);
        initComponents();
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        sourceText.setText(File.listRoots()[0].getCanonicalPath());
        destinationText.setText(File.listRoots()[File.listRoots().length - 1].getCanonicalPath());
        sourceNotValid.setVisible(false);
        destinationNotValid.setVisible(false);
        backupInItself.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        changeDestination = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        destinationText = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        sourceText = new javax.swing.JTextArea();
        changeSource = new javax.swing.JButton();
        accept = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        destinationNotValid = new javax.swing.JLabel();
        sourceNotValid = new javax.swing.JLabel();
        backupInItself = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        changeDestination.setText("Change");
        changeDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeDestinationActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose your source folder:");

        jLabel2.setText("Choose your desired backup location:");

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        destinationText.setColumns(20);
        destinationText.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        destinationText.setRows(1);
        jScrollPane1.setViewportView(destinationText);

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        sourceText.setColumns(20);
        sourceText.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        sourceText.setRows(1);
        jScrollPane2.setViewportView(sourceText);

        changeSource.setText("Change");
        changeSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeSourceActionPerformed(evt);
            }
        });

        accept.setText("Accept");
        accept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        destinationNotValid.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        destinationNotValid.setForeground(new java.awt.Color(255, 100, 100));
        destinationNotValid.setText("*Not a valid directory");

        sourceNotValid.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        sourceNotValid.setForeground(new java.awt.Color(255, 100, 100));
        sourceNotValid.setText("*Not a valid directory");

        backupInItself.setForeground(new java.awt.Color(255, 100, 100));
        backupInItself.setText("You cannot backup a folder inside of itself.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(backupInItself, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(sourceNotValid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(changeSource, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addComponent(destinationNotValid))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(changeDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(accept, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(changeSource)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sourceNotValid)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(changeDestination)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(destinationNotValid))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backupInItself, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accept)
                    .addComponent(cancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        dispose();
    }//GEN-LAST:event_formWindowClosing

    private void changeDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeDestinationActionPerformed
        File source = null;
        LookAndFeel currentLookAndFeel = UIManager.getLookAndFeel();
        try {
            JFileChooser fileChooser;
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            if (new File(destinationText.getText()).exists()) {
                fileChooser = new JFileChooser(destinationText.getText());
            } else {
                fileChooser = new JFileChooser();
            }
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int response = fileChooser.showOpenDialog(jLabel1);
            if (response == JFileChooser.APPROVE_OPTION) {
                source = fileChooser.getSelectedFile();
                destinationText.setText(source.getCanonicalPath());
            }
            UIManager.setLookAndFeel(currentLookAndFeel);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException | IOException ex) {
            Logger.getLogger(NewDirectoryBUForm.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_changeDestinationActionPerformed

    private void changeSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeSourceActionPerformed
        File source = null;
        LookAndFeel currentLookAndFeel = UIManager.getLookAndFeel();
        try {
            JFileChooser fileChooser;
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            if (new File(sourceText.getText()).exists()) {
                fileChooser = new JFileChooser(sourceText.getText());
            } else {
                fileChooser = new JFileChooser();
            }
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int response = fileChooser.showOpenDialog(jLabel1);
            if (response == JFileChooser.APPROVE_OPTION) {
                source = fileChooser.getSelectedFile();
                sourceText.setText(source.getCanonicalPath());
            }
            UIManager.setLookAndFeel(currentLookAndFeel);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException | IOException ex) {
            Logger.getLogger(NewDirectoryBUForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_changeSourceActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void acceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptActionPerformed
        result = new HashMap<File, ArrayList<Object>>();
        File source = new File(sourceText.getText());
        File destination = new File(destinationText.getText());
        boolean valid = true;
        if (!source.exists() || !source.isDirectory()) {
            sourceNotValid.setVisible(true);
            valid = false;
        } else {
            sourceNotValid.setVisible(false);
        }

        if (!destination.exists() || !destination.isDirectory()) {
            destinationNotValid.setVisible(true);
            valid = false;
        } else {
            destinationNotValid.setVisible(false);
        }

        if (destinationText.getText().contains(sourceText.getText())) {
            backupInItself.setVisible(true);
            valid = false;
        } else {
            backupInItself.setVisible(false);
        }

        if (valid) {
            ArrayList<Object> settings=new ArrayList<>();
            settings.add(new File(destinationText.getText()));
            settings.add(true);
            settings.add(false);
            settings.add(false);
            result.put(new File(sourceText.getText()),settings);
            dispose();
        }
    }//GEN-LAST:event_acceptActionPerformed

    public Map<File, ArrayList<Object>> showDialog() {
        setVisible(true);
        return result;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accept;
    private javax.swing.JLabel backupInItself;
    private javax.swing.JButton cancel;
    private javax.swing.JButton changeDestination;
    private javax.swing.JButton changeSource;
    private javax.swing.JLabel destinationNotValid;
    private javax.swing.JTextArea destinationText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel sourceNotValid;
    private javax.swing.JTextArea sourceText;
    // End of variables declaration//GEN-END:variables
}
